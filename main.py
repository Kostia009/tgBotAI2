import os
import logging
from groq import Groq
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    filters, ContextTypes, ConversationHandler
)

# Logging
logging.basicConfig(level=logging.INFO)

# Groq API
groq_client = Groq(api_key=os.getenv("GROQ_API_KEY"))

# –ö–ª—é—á—ñ –¥–ª—è –≤–∏–±–æ—Ä—É –º–æ–≤–∏
LANGUAGE, CHAT = range(2)

# –°—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫–∏
language_keyboard = ReplyKeyboardMarkup(
    [["üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞", "üá∑üá∫ –†—É—Å—Å–∫–∏–π", "üá¨üáß English"]],
    one_time_keyboard=True,
    resize_keyboard=True
)

# –í–∏–±—ñ—Ä –º–æ–≤–∏
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤—ñ—Ç! –û–±–µ—Ä–∏ –º–æ–≤—É –¥–ª—è —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è:",
        reply_markup=language_keyboard
    )
    return LANGUAGE

# –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –º–æ–≤—É
async def set_language(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = update.message.text
    if "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞" in lang:
        context.user_data["lang"] = "uk"
    elif "–†—É—Å—Å–∫–∏–π" in lang:
        context.user_data["lang"] = "ru"
    elif "English" in lang:
        context.user_data["lang"] = "en"
    else:
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä–∏ –º–æ–≤—É –∑ –∫–Ω–æ–ø–æ–∫.")
        return LANGUAGE

    await update.message.reply_text("–ú–æ–≤—É –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ‚úÖ", reply_markup=ReplyKeyboardRemove())
    return CHAT

# –í—ñ–¥–ø–æ–≤—ñ–¥—å AI
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_message = update.message.text
    lang = context.user_data.get("lang", "uk")  # –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º ‚Äî —É–∫—Ä

    prompt = {
        "uk": f"–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é: {user_message}",
        "ru": f"–û—Ç–≤–µ—á–∞–π –ø–æ-—Ä—É—Å—Å–∫–∏: {user_message}",
        "en": f"Answer in English: {user_message}",
    }[lang]

    try:
        response = groq_client.chat.completions.create(
            model="llama3-70b-8192",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.7,
            max_tokens=150
        )
        reply = response.choices[0].message.content
        await update.message.reply_text(reply)
    except Exception as e:
        await update.message.reply_text(f"–ü–æ–º–∏–ª–∫–∞: {e}")

# –ó–∞–ø—É—Å–∫
def main():
    token = os.getenv("TELEGRAM_BOT_TOKEN")
    app = ApplicationBuilder().token(token).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            LANGUAGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_language)],
            CHAT: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message)]
        },
        fallbacks=[CommandHandler("start", start)],
    )

    app.add_handler(conv_handler)
    app.run_polling()

if __name__ == "__main__":
    main()
